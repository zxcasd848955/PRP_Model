//排班周期
N = 7;
//周末(非行政上班时间)
weekend = {6, 7};//表示集合
//正常上下班时间
weekday = {1,2,3,4,5};
//3种职级划分
pc = 3;
P = {1, 2, 3}; //分别表示
//不同 职级医师的个数
cp1 = 1; cp2 = 4; cp3 = 1;
Cp = [1,4, 1]; 
//不同职级医师的不工作的天数集合

nw_p1 = 
[
	{}
];
nw_p2 = 
[
	{},
	{},
	{},
	{}
];
nw_p3 = 
[
	{}
];
//四种类型的班的编号
sn = 4;
S = [1, 2, 3, 4];// 白班，夜班，门诊，值班
//不合理的排班次序集合
forbidden_S = 
[
	[2, 1],
	[2, 3],
	[2, 4],
	[4, 1],
	[4, 2],
	[4, 3],
	[4, 4]
];
// 每天每种类型的班需要的最少和最多的医师数量
D_min = 
[
	[1,1,1,1],
	[1,1,1,1],
	[1,1,1,1],
	[1,1,1,1],
	[1,1,1,1],
	[0,0,1,1],
	[0,0,2,1]
];
D_max = 
[
	[1,1,1,1],
	[1,1,1,1],
	[1,1,1,1],
	[1,1,1,1],
	[1,1,1,1],
	[0,0,1,1],
	[0,0,2,1]
];
//最多连续上夜班的天数
N_max = 2;//2
//最多连续工作的天数
W_max = 2; //2

//职级为p的上类型为s的班的最少和最多天数
Q_min = 
[
	[1,1,0,1],
	[1,1,0,1],
	[0,0,3,0]
];

Q_max = [
	[2,2,0,2],
	[2,2,1,2],
	[2,0,4,0]
];
//**************************去掉的变量**************************\\
//每名医师在周末累计工作的最大天数
//int on_weekend_day_max = 1; //2
//不同职级每名医师在周末最少工作时间和最多工作时间，主要考虑住院医师可能值很多的班，或者
//int on_weekend_hours_min[1..pc] = [0, 0, 0]; //门诊8，值班24
//int on_weekend_hours_max[1..pc] = [24, 24, 16];
//最少连续休息的天数
//int R_min = 1;
//不同职级医师不能排的班的集合
//int fs_p1 = 3; //门诊
//int fs_p3[1..2] = [2, 4]; //夜班和值班

//每名医师最少和最多工作天数； 分不同职级？
on_all_day_min = 4;
on_all_day_max = 5; //6

//每种类型的班的时长
long_shift = [8, 8, 8, 24];

//不同职级医师工作总时长的上下限
on_all_hours_min = [40, 40, 32];//
on_all_hours_max = [64, 64, 40]; //[64, 64, 42]

//软约束权重
cn = 6;
w = [30, 10, 20, 10, 15, 15];
//w = [10, 10, 10, 10, 10, 10];
//最多值班次数 
duty_max = 2; //2

//在周末累计休息不能低于最低限制
rest_weekend_min = 1;